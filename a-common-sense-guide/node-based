Linked List -> a data structure representing items in a list

  - These do not consist of a continuous set of allocated memory cells but instead are not next to each other
  in memory.
  - Cells that are not adjacent to each other are called nodes.
  - To know where each is stored, each node stores the memory address of the next node in the list.
  - So to store one item in a linked list requires two cells, one for the piece of data and one for the location
  of the next node.
  - The benefit is that an unknown number of items can be added to the list, while an array requires allocated
  memory upfront and must be moved to a new block if resized.
  - Reading and Searching -> O(N)
  - Inserting -> in contrast to an array, position 1 insert is O(1) since the Linked List can just point to the
  start of the previous list. Bus if the insert happens inside the list, it needs to Search for the correct
  node first, which takes O(N) steps. This is the same for inserting into the middle of an array. Therefore,
  best and worst case scenarios for Insert are opposite each other for Linked List and Arrays.
  - Deletion -> Just like in Insert, the best case for deletion is on the first item, taking O(1) steps. The
  average happens in the middle and the worst case is at the end since all items must be searched through to
  get to the node. This results in O(N).
  - Linked Lists "shine" when examining a single list and deleting many elements from it. If an array were to
  delete 1 in 10 iteams from a 10,000 sized array, each deletion would trigger a shift of all reaming elements.
  This would require 100,000 steps -> 100 * N. But a Linked List can just move the pointer. So even though we
  need 1,000 reading steps, we only need 100 deleting steps, reducing the total steps to 1,100.
  - A linked list can act as an implementation for a Queue, like we saw array do previously. However, to gain
  any benefit over an array implementation, we need to use a special Doubly Linked List. This has each node refer
  to the preceeding and proceeding node, or have a null pointer at the starting/ending position. Because this
  DLL has access to both sides, insert and delete at both sides is O(1). And since the DLL can insert data at
  the front at O(1) and delete from the end at O(1), this becomes a great implementation for a Queue.

Binary Trees -> fast search, insert, and delete while maintaining order

  - With binary search, sorted arrays are O(log N) to search, but still suffer slow insert and delete times. Hash
  Tables are O(1) for search, insert, and delete but do not maintain order. Binary trees do it all.
  - Similar to Linked Lists, each item in the tree references two other nodes, or one to two null pointers
  - Trees have a "root" and "levels" and many types of tree structures.
  - A Binary Tree abides by the following rules
    1) Each node has either zero, one, or two children.
    2) If a node has two children, it must have one child that has a lesser value and one with a higher value.
  - Seach is O(log N) since each search eliminates half the remaining values.
  - Insertion always takes O(log N) search steps plus one more for the insertion operation, which is still
  O(log N).
  
  
