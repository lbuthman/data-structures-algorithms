Bubble Sort requires a comparison between two elements and a swap. In the worst case, descending
  order, the algorithm is O(N^^)
  
Nested Loops have O(N^^) efficiency. Example on pg.53 shows a single loop, linear solution.

Selection Sort swaps different from Bubble Sort. During the loop, each item must be evaluated, but
only one swap is performed per round. However, even though Selection Sort is technically faster
with N^^/2 steps, Big O ignores Constatnts and the notation becomes O(N^^) for both.

Big O is a way to classify long term growth rates. This means that, based on the current data,
O(N^^) could outperform O(N). But, when two algorithms have the same classification like Bubble
and Selection Sort, they can perform very differently. In this example, Selection Sort is
faster and stays faster as data increases. Therefore, deeper analysis is required for comparing
algorithms with the same Big O notation.

An algorithm can be described in best, average, and worst case scenarios. In terms of sorting,
already sorted is the best case and reverse is of course the worst, while random is average.
One major use of this is for analyzing the algorithm to see if it exhibits different cases in
each scenario. Some may and others may not, which can be important when selecting one.
