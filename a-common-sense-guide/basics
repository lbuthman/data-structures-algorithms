Four Primary Operations -> Search, Read, Insert, Delete

For a Set type -> Search O(N), Read O(N), Insert (O2N), Delete O(N)
  - insert requires a search and an insert (which worse case requires a shift of the entire array)
  
Big O Notation -> How the number of steps increases as data increases?
  - O(1) -> constant time: no change as data increases
  - O(log N) -> log time: increases one step every time the data is doubled
  - O(N) -> linear time: as many steps as elements
  - O(N^^) -> quadratic time: as the elements increase, the steps increase exponentially
  
Logarithm -> The opposite of exponents
  - log2 8 = How many times do we need to divid 8 by 2 to get 1? -> 3
  - log2 64 = How many times do we need to halve 64 by 2 to get 1? -> 6
