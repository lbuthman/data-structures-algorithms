- A graph is a data structure that specializes in relationships, conveying how data is connected.

- In a graph, each node is a "vertex", each line is an "edge", and vertices connected by an edge are "adjacent"

- There are many ways to implement a graph, one is with Hash Tables.

- The example of Facebook shows that if one friends a person, the relationship is mutual. This graph is called
a "non-directed" graph. In the Twitter example, the relationship is one way and is called a "directed" graph.

- While a hash table can be used, one step up is via an Object Oriented approach.

- There are two classic ways to search a graph.
  1) Breadth-first search
  2) Depth-first search
  
- Breadth-First Search
  - Uses a Queue to keep track of which vertices to process next
  - the Queue begins simply with one item
  - Then follows three steps
    1) visit each vertex adjacent to the current vertex. If it hasn't been visited, mark it visited and add it
    to the queue.
    2) If the current vertext has no unvisited verticies adjacent to it, remove the next vertex from the queue
    and make it the current vertex.
    3) If there are no more unvisited verticies adjacent to the current vertex, and there are no more verticies
    in the queue, the algorithm is complete.
    
- This type of transversal is B(V) -> V not N, since there are additional steps that need to occur to process
the verticies in the edges. In breadth first search, we need to visit adjacent verticies 2x the number of edges
in the graph. So for E edges, we check adjacent vertices 2E times. Finally since there are O(V) removals from
the queue and O(E) visits, the breadth-first seach has an efficiency of O(V+E).

- Examples are given of using a relational database for relationship lookups. This produces an algorithm with
O(M log N) efficiency because each friend needed to be found in the table. The counterpoint was using a graph
database in which the lookup was O(N) since they are readily available in a graph structure.

- Weighted Graph adds a value to an edge to understand a certain relationship between nodes, like miles between
cities. The ruby implementation in the book used a Hash Table instead of an array to do this.

- Weighted Graphs can tackle "the shortest path problem". How to traverse a series of noes in an efficient way,
as determined by the relationship between nodes. One algorithm to solve this is Dijkstra's Algorithm (dike struh).
  1) Make the starting vertex our current vertex.
  2) Check all the verticies adjacent to the current index, calculate and record the weights from the starting
  vertex to all known locations.
  3) To determine the next current vertex, find the cheapest unvisited known vertex that can be reached from
  our starting vertex.
  4) Repeat Steps 1-3 until every vertex in the graph has been visited.
